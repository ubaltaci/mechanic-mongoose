{"version":3,"sources":["../../src/plugins/slug.js"],"names":[],"mappings":";;;;AAAA,IAAM,OAAO,QAAQ,aAAR,CAAP;AACN,IAAM,QAAQ,QAAQ,OAAR,CAAR;AACN,IAAM,UAAU,QAAQ,SAAR,CAAV;;;;;;;AAON,OAAO,OAAP,GAAiB,UAAC,MAAD,EAAS,OAAT,EAAqB;;AAElC,QAAM,WAAW,QAAQ,QAAR,CAFiB;AAGlC,QAAM,cAAc,OAAO,IAAP,CAAY,OAAO,IAAP,CAA1B,CAH4B;AAIlC,QAAM,YAAY,EAAZ,CAJ4B;;;;;;;AAMlC,6BAAuB,qCAAvB,oGAAoC;gBAA3B,yBAA2B;;;;;;;;;;;;;;AAahC,gBAAI,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,KACI,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,IAAgC,MAAhC,IAA2C,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,IAAgC,SAAS,MAAT,CAAgB,KAAhB,CAAsB,QAAtB,CAAhC,CAD/C,EACkH;;AAGlH,oBAAM,eAAe,OAAO,IAAP,CAAY,UAAZ,EAAwB,IAAxB,CAH6F;;AAKlH,oBAAI,OAAO,IAAP,CAAY,YAAZ,CAAJ,EAA+B;AAC3B,0BAAM,IAAI,KAAJ,WAAkB,iDAAlB,CAAN,CAD2B;iBAA/B;;AAIA,uBAAO,GAAP,qBACK,cAAe;AACZ,0BAAM,MAAN;AACA,4BAAQ,IAAR;AACA,+BAAW,IAAX;AACA,0BAAM,IAAN;kBALR,EATkH;;AAkBlH,0BAAU,IAAV,CAAe;AACX,0BAAM,UAAN;AACA,0BAAM,YAAN;iBAFJ,EAlBkH;aADtH;SAbJ;;;;;;;;;;;;;;KANkC;;AA8ClC,WAAO,GAAP,CAAW,MAAX,EAAmB,UAAU,IAAV,EAAgB;;AAE/B,YAAM,WAAW,IAAX,CAFyB;;AAI/B,cAAM,IAAN,CAAW,SAAX,EAAsB,UAAC,QAAD,EAAW,YAAX,EAA4B;;AAE9C,gBAAI,CAAC,SAAS,UAAT,CAAoB,SAAS,IAAT,CAArB,EAAqC;AACrC,uBAAO,cAAP,CADqC;aAAzC;AAGA,mBAAO,YAAY,QAAZ,EAAsB,QAAtB,EAAgC,YAAhC,CAAP,CAL8C;SAA5B,EAOnB,UAAC,KAAD,EAAW;AACV,gBAAI,KAAJ,EAAW;AACP,uBAAO,KAAK,KAAL,CAAP,CADO;aAAX;AAGA,mBAAO,MAAP,CAJU;SAAX,CAPH,CAJ+B;KAAhB,CAAnB,CA9CkC;CAArB;;AAmEjB,SAAS,WAAT,CAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD;;AAE/C,QAAM,YAAY,KAAK,SAAS,SAAS,IAAT,CAAd,CAAZ,CAFyC;;AAI/C,aAAS,WAAT,CAAqB,OAArB,qBACK,SAAS,IAAT,EAAgB,UADrB,EAEG,UAAC,KAAD,EAAQ,iBAAR,EAA8B;;AAE7B,YAAI,KAAJ,EAAW;AACP,mBAAO,SAAS,KAAT,CAAP,CADO;SAAX;;AAIA,YAAI,qBAAsB,kBAAkB,GAAlB,CAAsB,QAAtB,MAAoC,SAAS,GAAT,CAAa,QAAb,EAApC,EAA8D;AACpF,qBAAS,SAAS,IAAT,CAAT,GAA0B,YAAY,GAAZ,GAAkB,QAAQ,QAAR,EAAlB,CAD0D;AAEpF,mBAAO,UAAP,CAFoF;SAAxF;;AAKA,iBAAS,SAAS,IAAT,CAAT,GAA0B,SAA1B,CAX6B;AAY7B,eAAO,UAAP,CAZ6B;KAA9B,CAFH,CAJ+C;CAAnD","file":"slug.js","sourcesContent":["const Slug = require(\"speakingurl\");\nconst Async = require(\"async\");\nconst ShortId = require(\"shortid\");\n\n/**\n *\n * @param schema\n * @param options\n */\nmodule.exports = (schema, options) => {\n\n    const mongoose = options.mongoose;\n    const schemaItems = Object.keys(schema.tree);\n    const slugItems = [];\n\n    for (let schemaItem of schemaItems) {\n\n        /**\n         * test_title: String\n         * olamaz, propertylerinde slug: \"slug_key\" olması lazım.\n         *\n         * test_title: {\n         *    type: String,\n         *    slug: \"test_slug\"\n         * }\n         *\n         */\n\n        if (schema.tree[schemaItem].slug\n            && (schema.tree[schemaItem].type == String || (schema.tree[schemaItem].type == mongoose.Schema.Types[\"String\"]))) {\n\n\n            const referenceKey = schema.tree[schemaItem].slug;\n\n            if (schema.tree[referenceKey]) {\n                throw new Error(`Ref: ${referenceKey} in slug is used in another key.`);\n            }\n\n            schema.add({\n                [referenceKey]: {\n                    type: String,\n                    unique: true,\n                    lowercase: true,\n                    trim: true\n                }\n            });\n\n            slugItems.push({\n                main: schemaItem,\n                slug: referenceKey\n            });\n        }\n\n    }\n\n    schema.pre(\"save\", function (next) {\n\n        const instance = this;\n\n        Async.each(slugItems, (slugItem, eachCallback) => {\n\n            if (!instance.isModified(slugItem.main)) {\n                return eachCallback();\n            }\n            return _createSlug(instance, slugItem, eachCallback);\n\n        }, (error) => {\n            if (error) {\n                return next(error);\n            }\n            return next();\n        });\n\n    });\n};\n\nfunction _createSlug(instance, slugItem, callback) {\n\n    const slugValue = Slug(instance[slugItem.main]);\n\n    instance.constructor.findOne({\n        [slugItem.slug]: slugValue\n    }, (error, collapsedInstance) => {\n\n        if (error) {\n            return callback(error);\n        }\n\n        if (collapsedInstance && (collapsedInstance._id.toString() == instance._id.toString())) {\n            instance[slugItem.slug] = slugValue + \"-\" + ShortId.generate();\n            return callback();\n        }\n\n        instance[slugItem.slug] = slugValue;\n        return callback();\n    });\n\n}\n"]}