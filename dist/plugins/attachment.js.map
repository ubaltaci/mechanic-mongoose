{"version":3,"sources":["../../src/plugins/attachment.js"],"names":[],"mappings":"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","file":"attachment.js","sourcesContent":["/**\n *\n * Updated by uur on 12/01/16.\n */\n\n\"use strict\";\n\nconst Async = require(\"async\");\nconst Forklift = require(\"s3-forklift\");\nconst FileUploader = require(\"./uploader/file_uploader\");\nconst ImageUploader = require(\"./uploader/image_uploader\");\nconst CheckAttachments = require(\"./validation/check_attachments\");\n\n/**\n * @param schema\n * @param options\n */\n\nmodule.exports = (schema, options) => {\n\n    const mongoose = options.mongoose;\n    const s3 = options.s3;\n\n    if (!s3 || !mongoose) {\n        console.log(\"Options passed to mechanic-mongoose does not contain s3 credentials.\");\n    }\n\n    schema.statics.checkAttachments = (payload, instance, schema, errors) => {\n\n        CheckAttachments(mongoose, payload, instance, schema, errors);\n        return errors;\n    };\n\n\n    const schemaItems = Object.keys(schema.tree);\n\n    const attachments = {\n        images: [],\n        files: []\n    };\n\n    for (let schemaItem of schemaItems) {\n\n        /**\n         *\n         * test_image: {\n         *    type: mongoose.Schema.Types.Image,\n         *    versions: {\n         *       main: {\n         *           size: \"1920x1080\",\n         *           resize: \">\",\n         *           output: \"jpeg\"\n         *       },\n         *       display2: \"960x\",\n         *       display3: \"x960\"\n         *     }\n         * }\n         *\n         *    available resize options: <,!,>\n         *    available outputs: \"jpeg\", \"jpg\", \"png\"\n         *\n         *\n         *\n         * test_file {\n         *    type: mongoose.Schema.Types.File,\n         *    extension: [\"pdf\"]\n         * }\n         *\n         *\n         */\n\n        if (schema.tree[schemaItem].type == mongoose.Schema.Types[\"Image\"]) {\n\n            const versions = schema.tree[schemaItem][\"versions\"] || {};\n\n            if (typeof versions === \"string\" || versions instanceof String) {\n\n                attachments.images.push({\n                    schemaKey: schemaItem,\n                    versions: [\n                        {[\"main\"]: _transformImageDesc(versions, schemaItem)}\n                    ]\n                });\n                continue;\n            }\n\n            const versionKeys = Object.keys(versions);\n            if (versionKeys.indexOf(\"original\") != -1) {\n                throw new Error(`${schemaItem} contains 'original' key which do not valid.`);\n            }\n\n            const images = [];\n            for (let versionKey of versionKeys) {\n\n                if (versionKey == \"type\") {\n                    continue;\n                }\n\n                images.push({[versionKey]: _transformImageDesc(versions[versionKey], schemaItem)});\n            }\n\n            attachments.images.push({\n                schemaKey: schemaItem,\n                versions: images\n            });\n\n        }\n        else if (schema.tree[schemaItem].type == mongoose.Schema.Types[\"File\"]) {\n\n            attachments.files.push({\n                schemaKey: schemaItem,\n                extensions: _transformFileTypes(schema.tree[schemaItem][\"extension\"])\n            });\n        }\n    }\n\n    const forklift = new Forklift(s3);\n\n    schema.pre(\"save\", function (next) {\n\n        const instance = this;\n\n        const images = [];\n        const files = [];\n\n        for (let imageField of attachments.images) {\n\n            const schemaKey = imageField[\"schemaKey\"];\n\n            if (!instance[schemaKey] || !instance.isModified(schemaKey)) {\n                continue;\n            }\n\n            if (!instance[schemaKey].path || !instance[schemaKey].filename) {\n                console.log(`${schemaKey} is not valid in instance: ${instance[schemaKey]}`);\n                continue;\n            }\n\n            images.push({\n                versions: imageField[\"versions\"],\n                schemaKey: schemaKey\n            });\n        }\n\n        for (let fileField of attachments.files) {\n\n            const schemaKey = fileField[\"schemaKey\"];\n\n            if (!instance[schemaKey] || !instance.isModified(schemaKey)) {\n                continue;\n            }\n\n            if (!instance[schemaKey].path || !instance[schemaKey].filename) {\n                return next(new Error(`${schemaKey} is not valid in instance: ${instance[schemaKey]}`));\n            }\n\n            const ext = _getExtension(instance[schemaKey].filename);\n            const name = _getFileName(instance[schemaKey].filename);\n\n            if (fileField[\"extensions\"].indexOf(ext.toLocaleLowerCase()) == -1) {\n                return next(new Error(`${schemaKey} has not valid extension: ${ext}`));\n            }\n\n            files.push({\n                schemaKey: schemaKey,\n                name,\n                ext\n            });\n        }\n\n        Async.auto({\n\n            \"uploadFiles\": (autoCallback) => {\n\n                if (!attachments.files) {\n                    return autoCallback();\n                }\n                return FileUploader(forklift, instance, files, autoCallback);\n            },\n            \"uploadImages\": (autoCallback) => {\n\n                if (!attachments.images) {\n                    return autoCallback();\n                }\n                return ImageUploader(forklift, instance, images, autoCallback);\n            }\n        }, next);\n\n    });\n};\n\nfunction _transformFileTypes(extensions) {\n\n    if (typeof extensions === \"string\" || extensions instanceof String) {\n        return [extensions];\n    }\n    return extensions;\n}\n\nfunction _transformImageDesc(versionImage, schemaItem) {\n\n    const Image = {\n        output: \"jpeg\",\n        resize: \"!\"\n    };\n\n    if (typeof versionImage === \"string\" || versionImage instanceof String) {\n        Image[\"size\"] = _transformSize(versionImage, schemaItem);\n    }\n    else { // object\n        Image[\"size\"] = _transformSize(versionImage[\"size\"], schemaItem);\n        Image[\"output\"] = _transformOutput(versionImage[\"output\"], schemaItem);\n        Image[\"resize\"] = _transformResize(versionImage[\"resize\"], schemaItem);\n    }\n\n    return Image;\n}\n\nfunction _transformOutput(output, schemaItem) {\n\n    if (!output) {\n        return \"jpeg\";\n    }\n\n    if ([\"jpeg\", \"jpg\", \"png\"].indexOf(output) == -1) {\n        throw new Error(`schemaItem: ${schemaItem}, output:\"${output}\" is not valid`);\n    }\n\n    return output;\n}\n\nfunction _transformResize(resize, schemaItem) {\n\n    if (!resize) {\n        return \"!\";\n    }\n\n    if ([\">\", \"<\", \"!\"].indexOf(resize) == -1) {\n        throw new Error(`schemaItem: ${schemaItem}, resize:\"${resize}\" is not valid`);\n    }\n\n    return resize;\n}\n\nfunction _transformSize(size, schemaItem) {\n\n    if (!size) {\n        throw new Error(`schemaItem: ${schemaItem}, size is not exist in image.`);\n    }\n\n    if (size == \"keep\") {\n        return {\n            width: 0,\n            height: 0\n        }\n    }\n\n    const sizeArray = size.split(\"x\");\n    if (sizeArray.length != 2) {\n        throw new Error(`schemaItem: ${schemaItem}, size:\"${size}\" is not valid`);\n    }\n\n    let width;\n    let height;\n\n    try {\n        width = sizeArray[0] ? parseInt(sizeArray[0]) : null;\n        height = sizeArray[1] ? parseInt(sizeArray[1]) : null;\n    }\n    catch (e) {\n        throw new Error(`schemaItem: ${schemaItem}, ${size} is not valid`);\n    }\n\n    return {\n        width,\n        height\n    }\n\n}\n\nfunction _getFileName(fileName) {\n\n    try {\n        return fileName && fileName.split(\".\")[0]\n    }\n    catch (e) {\n        return \"\";\n    }\n}\n\nfunction _getExtension(fileName) {\n\n    try {\n        return fileName && fileName.split(\".\").pop()\n    }\n    catch (e) {\n        return \"\";\n    }\n}"]}